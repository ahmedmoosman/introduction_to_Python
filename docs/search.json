[
  {
    "objectID": "Index.html",
    "href": "Index.html",
    "title": "A Gentle Introduction to Python",
    "section": "",
    "text": "Economist widely used STATA for the last 30 years to analyse economic data. Whether they are researching school selection, minimum wage, GDP, or stock trends, Stata provides all the statistics, graphics, and data-management tools needed to pursue a broad range of economic questions.\nPython is a widely used general-purpose, high-level programming language. Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java. The language provides constructs intended to enable clear programs on both a small and large scale.\nThe core philosophy of the language is summarized by the document “PEP 20 (The Zen of Python)” as:\n\nBeautiful is better than ugly\nExplicit is better than implicit\nSimple is better than complex Complex is better than complicated\nReadability counts\n\nPython is compact and readable. Programs written in Python are typically much shorter than equivalent C, C++, or Java programs. Python is extensible: if you know how to program in C, it is easy to add a new built-in function or module to the interpreter, either to perform critical operations at maximum speed.\n\n\n\nOpen source!\nEasy to learn and use with no programing experiences.\nRich ecosystem for modeling and data analysis\n\n\n\n\nThe language is named after the BBC show Monty Python’s Flying Circus (1969-1974) and has nothing to do with reptiles.\n\n\n\n\nPython has a large standard library, commonly cited as one of Python’s greatest strengths, providing tools suited to many tasks.\nThe standard library is not essential to run Python or embed Python within an application.\nPython package Index (PyPI), the official repository for third-party Python software, contains over 350,000 packages with a wide range of functionality.\nNotable applications: web scraping, scientific computing, text processing, image processing.\n\n\n\n\nThis is a short introduction to Python for course of data science for economists. Topics that will not be discussed in this course are:\n\nPackage developing\nEfficient coding (partly, we will discuss reproducibility)\nWeb development\nGeospatial analysis\n\n\n\n\nLearning Python, 5th Edition by Mark Lutz,\nPython Crash Course, 2nd Edition by Eric Matthes,\nPython Data Science Handbook by Jake VanderPlas,\nPython for Data Analysis, 2nd Edition by Wes McKinney,\nPython for Finance, 2nd Edition by Yves Hilpisch."
  },
  {
    "objectID": "Index.html#functions",
    "href": "Index.html#functions",
    "title": "A Gentle Introduction to Python",
    "section": "Functions",
    "text": "Functions\nThe Python interpreter incorporates a variety of built-in functions that are consistently accessible. These functions are presented here in alphabetical order. You can use the help() function, for example help(abs), to access detailed information about a specific function.\n\n\n'abs() aiter() all() any() anext() ascii() bin() bool() breakpoint() bytearray() bytes() callable() chr() classmethod() compile() complex() delattr() dict() dir() divmod() enumerate() eval() exec() filter() float() format() frozenset() getattr() globals() hasattr() hash() help() hex() id() input() int() isinstance() issubclass() iter() len() list() locals() map() max() memoryview() min() next() object() oct() open() ord() pow() print() property() range() repr() reversed() round() set() setattr() slice() sorted() staticmethod() str() sum() super() tuple() type() vars() zip() __import__()'\n\n\n\nWe can create a function that writes the Fibonacci series to an arbitrary boundary.\nThe function should also include a proper help with the docstring\n\nThe first line should always be a short, concise summary of the object’s purpose.\nIf there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description.\nThe following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.\n\n\n\n# 0, 1, 1, 2, 3, 5,\ndef fib(n):    # write Fibonacci series up to n\n    \"\"\"Print a Fibonacci series up to n.\n    \n    par n: integer\n    out  : list\n    \"\"\" # the function help\n    a, b = 0, 1\n    while a &lt; n:\n        print(a, end=' ')\n        #  better than print(a), why?\n        a, b = b, a+b\n\n\nhelp(fib)\n\nHelp on function fib in module __main__:\n\nfib(n)\n    Print a Fibonacci series up to n.\n\n    par n: integer\n    out  : list\n\n\n\n\nfib(4)\n\n0 1 1 2 3 \n\n\nGenerally Functions are structured like:\n\ndef function_name(inputs):\n    # step 1\n    # step 2\n    # ...\n    return outputs\n\n\ndef mean(numbers):\n    total = sum(numbers)\n    N = len(numbers)\n    answer = total / N\n\n    return answer\n\nx = [1,2,3,4,5,6]\nprint(mean(x))\n\n3.5\n\n\nIf we save the function to a file named mycollections.py, we could import the function as follows:\n\nimport mycollections\nmycollections.fib(200)\n\nfrom mycollections import fib\nfib(2)\n\n0 1 1 2 3 5 8 13 21 34 55 89 144 0 1 1 \n\n\n\nExample from economics\nProduction functions are valuable tools for representing the economic activities of firms generating goods or the total output within an economy. Despite using the term “function” in a mathematical context, we will closely link the conceptualization of mathematical functions with the implementation of Python functions. \\[\nY=F(K,L)\n\\]\nCobb-Douglas production functions can help us understand how to create Python functions and why they are useful.\n\\[\nY=zK^\\alpha L^{1-\\alpha}\n\\]\nThe function is parameterized by:\n\nA parameter \\(\\alpha\\) \\(\\large \\epsilon\\)[0,1], called the “output elasticity of capital”.\nA value \\(z\\) called the Total Factor Productivity (TFP).\n\nNow let’s define the Cobb-Douglas function which computes the output production with parameters \\(z\\)=1 and \\(\\alpha\\)=0.33 and takes the input \\(K\\) and \\(L\\):\n\ndef cobb_douglas(K,L):\n  #create alpha and z\n  z=1\n  alpha=0.33\n  return z*K**alpha*L**(1-alpha)\n\nNow we can use this function and do the computations as fellow:\n\ncobb_douglas(1.0,0.5)\n\n0.6285066872609142\n\n\nNow, Your turn: Define a function that compares two Cobb-Douglas functions and returns the ratio between the two production functions.\n\\[\nY_2=F(K_2,L_2)=F(\\gamma K_1,\\gamma L_1)\n\\]\nHint : Use the same function to calculate all the functions.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nSolution:\n\n\nCode\ndef ratio_CD (K, L, gamma):\n  y1 = cobb_douglas(K,L)\n  y2 = cobb_douglas(gamma*K,gamma*L)\n  y_ratio = y2/y1\n  return y_ratio/gamma\n\nprint(ratio_CD(1,0.5,2))\n\n\n1.0"
  },
  {
    "objectID": "Index.html#iteration",
    "href": "Index.html#iteration",
    "title": "A Gentle Introduction to Python",
    "section": "Iteration",
    "text": "Iteration\nTypes in Iterations in Python:\n\nWhile Loop –&gt; A condition-based iteration\nFor Loop –&gt; An iteration technique that traverses through iterable objects\nRecursion –&gt; a programming technique where a function calls itself to solve a problem by breaking it down into smaller instances of the same problem.\n\nBefore jumping into iteration let’s see how the if statements are computes in Python.\n\n# if condition\n    # code to run when condition is True\n#else\n    # code to run if no conditions above are True\n    #return or print somethin\n\nif (1&lt;2) is True:\n  print(\" 1 is less than 2\")    \n\n 1 is less than 2\n\n\nSuppose we wanted to print out the first 10 integers and their squares. we could do somethings like this.\n\nprint(f\"1**2={1**2}\")\nprint(f\"2**2={2**2}\")\nprint(f\"3**2={3**2}\")\nprint(f\"4**2={4**2}\")\nprint(f\"5**2={5**2}\")\nprint(f\"6**2={6**2}\")\n\n1**2=1\n2**2=4\n3**2=9\n4**2=16\n5**2=25\n6**2=36\n\n\nFor loops can the same and with less coding efforts.\n\nfor i in range(1,11):\n  print(f\"{i}**2={i**2}\")\n\n1**2=1\n2**2=4\n3**2=9\n4**2=16\n5**2=25\n6**2=36\n7**2=49\n8**2=64\n9**2=81\n10**2=100\n\n\n\n# for item in iterable:\n   # operation 1 with item\n   # operation 2 with item\n   # ...\n   # operation N with item\n\nWhile loops:\n\ni = 0\nwhile i &lt; 3:\n    print(i)\n    i = i + 1\nprint(\"done\")\n\n0\n1\n2\ndone\n\n\nSuppose we wanted to know the smallest N such that \\(\\sum_{i=0}^{N}{i&gt;1000}\\)\n\ntotal = 0\ni = 0\nwhile total &lt;= 1000:\n    i = i + 1\n    total = total + i\n\nprint(\"The answer is\", i)\n\nThe answer is 45\n\n\nThis takes us to more technical stuffs like data analysis and statistical modelling using both buil-in functions and libraries. Libraries offer a more efficient way of using python as they are fast executable. Pandas and NumPy are most frequent-used and well-know libraries that used in Python."
  },
  {
    "objectID": "Index.html#numpy-arrays",
    "href": "Index.html#numpy-arrays",
    "title": "A Gentle Introduction to Python",
    "section": "NumPy Arrays",
    "text": "NumPy Arrays\nNumPy is a powerful Python package for manipulating data with multi-dimensional vectors. Its versatility and speed makes Python an ideal language for applied and computational mathematics. NumPy’s core contribution is a new data-type called an array. An array is similar to a list, but numpy imposes some additional restrictions on how the data inside is organized\n\n# to install: pip install numpy \nimport numpy as np #np is called alias and is standard way of calling libraries in Python \n\n\nx_1d = np.array([1, 2, 3])\nprint(x_1d)\n\n[1 2 3]\n\n\nThis is one dimensional array as a list number and you can do all the slicing and indexing operations as we previously saw.\n\nprint(x_1d[0])\nprint(x_1d[0:2])\nprint(x_1d[0:3] == x_1d[:])\n\n1\n[1 2]\n[ True  True  True]\n\n\nNumPy arrays act like mathematical vectors and matrices: + and * perform component-wise addition or multiplication.\n\nx, y = np.array([1, 2, 3]), np.array([4, 5, 6])\nprint(x, y)\nprint(x + 10) # Add 10 to each entry of x.\nprint(x * 4) # Multiply each entry of x by 4.\nx + y\n\n[1 2 3] [4 5 6]\n[11 12 13]\n[ 4  8 12]\n\n\narray([5, 7, 9])\n\n\nExample: Write a function that defines the following matrix as NumPy array and return \\(-A^3+9A^2-15A\\)\n\nA=[\n  [3,1,4],\n  [1,5,9],\n  [-5,3,1]\n]\nprint(A)\n\n# To print A matrix in a nice form you can use for loops(of course there are many ways to do it with packages)\nfor row in A:\n  print(row)\n\n[[3, 1, 4], [1, 5, 9], [-5, 3, 1]]\n[3, 1, 4]\n[1, 5, 9]\n[-5, 3, 1]\n\n\n\nimport numpy as np\ndef function_numpy(A):\n  A_1 = [row for row in A] \n  A_2 = np.array(A_1)\n  return(-A_2**3+9*A_2**2-15*A_2)\n\nfunction_numpy(A)\n\narray([[   9,   -7,   20],\n       [  -7,   25, -135],\n       [ 425,    9,   -7]])\n\n\nNumPy has several attributes, some of which are listed below.\n\nNumPy attributes\n\n\n\n\n\n\nAttribute\nDescription\n\n\n\n\ndtype\nThe type of the elements in the array.\n\n\nndim\nThe number of axes (dimensions) of the array.\n\n\nshape\nA tuple of integers indicating the size in each dimension.\n\n\nsize\nThe total number of elements in the array.\n\n\n\nExamples\n\n# Create an array of the first seven integers \nnp.arange(7)\n# Create an array of floats from 1 to 12\nnp.arange(1.,13.)\n# Create an array of values between 0 and 20, stepping by 2\nnp.arange(0,20,2)\n\narray([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n\n\nFor plotting NumPy arrays, we can use Matplotlib package the main visualization package for Python.\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Step 1\nfig, ax = plt.subplots()\n\n# Step 2\nx = np.linspace(0, 2*np.pi, 100)\ny = np.sin(x)\n\n# Step 3\nax.plot(x, y)\n\n\n\n\n\n\n\n\nMore advanved plot\n\nN = 50\n\nnp.random.seed(42)\n\nx = np.random.rand(N)\ny = np.random.rand(N)\ncolors = np.random.rand(N)\narea = np.pi * (15 * np.random.rand(N))**2  # 0 to 15 point radii\n\nfig, ax = plt.subplots()\n\nax.scatter(x, y, s=area, c=colors, alpha=0.5)\n\nax.annotate(\n    \"First point\", xy=(x[0], y[0]), xycoords=\"data\",\n    xytext=(25, -25), textcoords=\"offset points\",\n    arrowprops=dict(arrowstyle=\"-&gt;\", connectionstyle=\"arc3,rad=0.6\")\n)\n\nText(25, -25, 'First point')"
  },
  {
    "objectID": "Index.html#data-wrangling-with-pandas",
    "href": "Index.html#data-wrangling-with-pandas",
    "title": "A Gentle Introduction to Python",
    "section": "Data Wrangling with Pandas",
    "text": "Data Wrangling with Pandas\nPandas is at the top of the “scientific stack”, because it allows data to be imported, manipulated and exported so easily. In contrast, NumPy supports the bottom of the stack with fundamental infrastructure for array operations, mathematical calculations, and random number generation.\nPandas is a Python package providing fast, flexible, and expressive data structures designed to work with relational or labeled data both. It is a fundamental high-level building block for doing practical, real world data analysis in Python.\nPandas is well suited for:\n\nTabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet\nOrdered and unordered (not necessarily fixed-frequency) time series data.\nArbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels\nAny other form of observational / statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure\n\n\nkey Features of Pandas\n\nEasy handling of missing data\nSize mutability: columns can be inserted and deleted from DataFrame and higher dimensional objects\nAutomatic and explicit data alignment: objects can be explicitly aligned to a set of labels, or the data can be aligned automatically\nPowerful, flexible group by functionality to perform split-apply-combine operations on data sets\nIntelligent label-based slicing, fancy indexing, and subsetting of large data sets\nIntuitive merging and joining data sets\nFlexible reshaping and pivoting of data sets\nHierarchical labeling of axes\nRobust IO tools for loading data from flat files, Excel files, databases, and HDF5\nTime series functionality: date range generation and frequency conversion, moving window statistics, moving window linear regressions, date shifting and lagging, etc.\n\n\n# To install use !pip install pandas -U\nimport pandas as pd"
  }
]